<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.liang.auth.basic.mapper.AuthRolePermissionDao">
    <resultMap type="com.liang.auth.basic.entity.AuthRolePermission" id="AuthRolePermissionMap">
        <result property="id" column="id" jdbcType="INTEGER"/>
        <result property="roleId" column="role_id" jdbcType="VARCHAR"/>
        <result property="permissionId" column="permission_id" jdbcType="VARCHAR"/>
        <result property="createdBy" column="created_by" jdbcType="VARCHAR"/>
        <result property="createdTime" column="created_time" jdbcType="TIMESTAMP"/>
        <result property="updateBy" column="update_by" jdbcType="VARCHAR"/>
        <result property="updateTime" column="update_time" jdbcType="TIMESTAMP"/>
        <result property="isDeleted" column="is_deleted" jdbcType="INTEGER"/>
    </resultMap>

    <!-- 批量插入 -->
    <insert id="insertBatch" keyProperty="id" useGeneratedKeys="true">
        insert into auth_role_permission(role_id, permission_id, created_by, created_time, update_by, update_time,
        is_deleted)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.roleId}, #{entity.permissionId}, #{entity.createdBy}, #{entity.createdTime}, #{entity.updateBy},
            #{entity.updateTime}, #{entity.isDeleted})
        </foreach>
    </insert>
    <!-- 批量插入或按主键更新 -->
    <insert id="insertOrUpdateBatch" keyProperty="id" useGeneratedKeys="true">
        insert into auth_role_permission(role_id, permission_id, created_by, created_time, update_by, update_time,
        is_deleted)
        values
        <foreach collection="entities" item="entity" separator=",">
            (#{entity.roleId}, #{entity.permissionId}, #{entity.createdBy}, #{entity.createdTime}, #{entity.updateBy},
            #{entity.updateTime}, #{entity.isDeleted})
        </foreach>
        on duplicate key update
        role_id = values(role_id) , permission_id = values(permission_id) , created_by = values(created_by) ,
        created_time = values(created_time) , update_by = values(update_by) , update_time = values(update_time) ,
        is_deleted = values(is_deleted)
    </insert>

    <select id="queryAllByLimit" resultMap="AuthRolePermissionMap">
        select
        id, role_id, permission_id, created_by, created_time, update_by, update_time, is_deleted
        from auth_role_permission
        <where>
            <if test="id != null">
                and id = #{id}
            </if>
            <if test="roleId != null">
                and role_id = #{roleId}
            </if>
            <if test="permissionId != null">
                and permission_id = #{permissionId}
            </if>
            <if test="createdBy != null and createdBy != ''">
                and created_by = #{createdBy}
            </if>
            <if test="createdTime != null">
                and created_time = #{createdTime}
            </if>
            <if test="updateBy != null and updateBy != ''">
                and update_by = #{updateBy}
            </if>
            <if test="updateTime != null">
                and update_time = #{updateTime}
            </if>
            <if test="isDeleted != null">
                and is_deleted = #{isDeleted}
            </if>
        </where>
    </select>
</mapper>

